## Plan: Complete Authentication System Implementation

**Date:** 2025-10-25
**Status:** READY TO EXECUTE

### Phase 1: Add Authentication to All API Endpoints
**Files to modify:**
- `apps/api/api/v1/organizations_pydal.py` - Add `@login_required` to GET endpoints
- `apps/api/api/v1/entities.py` - Add `@login_required` to GET endpoints
- `apps/api/api/v1/dependencies.py` - Add `@login_required` to GET endpoints
- `apps/api/api/v1/organization_tree.py` - Add `@login_required` to GET endpoints
- Any other endpoints missing auth decorators

### Phase 2: User Profile System
**Backend API (`apps/api/api/v1/`):**
- Create `profile.py` with endpoints:
  - `GET /profile/me` - Get current user's profile
  - `PATCH /profile/me` - Update profile (organization_id, full_name, email)

**Frontend (`web/src/`):**
- Create `pages/Profile.tsx` with tabs:
  - **Profile Info** tab: Display/edit user info and OU assignment
  - **API Keys** tab: Manage authentication keys
- Add route `/profile` in `App.tsx`
- Add profile link in navigation/header

### Phase 3: API Key Management System
**Backend API:**
- Create `api_keys.py` with endpoints:
  - `GET /api-keys` - List user's API keys
  - `POST /api-keys` - Generate new API key (returns JWT with long expiration)
  - `DELETE /api-keys/{id}` - Revoke API key

**Database (PyDAL model in `apps/api/models/pydal_models.py`):**
- Add `api_keys` table:
  - `id`, `user_id`, `name`, `key_hash`, `prefix` (for display), `created_at`, `last_used_at`, `expires_at`

**Frontend:**
- API Keys tab in Profile page with:
  - List of existing keys (show prefix only, creation date, last used)
  - "Generate New Key" button with name input
  - Display full key ONCE on creation (copy to clipboard)
  - Delete button for each key

### Phase 4: User Management Portal
**Backend API:**
- Create `users.py` with endpoints:
  - `GET /users` - List all users (admin only)
  - `POST /users` - Create new user (admin only)
  - `PATCH /users/{id}` - Update user role/status (admin only)
  - `DELETE /users/{id}` - Delete user (admin only)

**Database:**
- Update `identities` table to include:
  - `portal_role` field: 'admin', 'editor', 'observer'
  - Add portal role checking to auth decorators

**Frontend:**
- Create `pages/Users.tsx` with:
  - User list table (username, email, role, OU, status)
  - Create user modal (username, password, email, role, OU)
  - Edit user modal (update role, OU, activate/deactivate)
  - Delete user with confirmation
- Add route `/users` (admin only)
- Add "Users" link in nav (visible only to admins)

### Phase 5: Role-Based Access Control
**Update auth decorators:**
- Add `@role_required('admin')` decorator for admin-only endpoints
- Add `@role_required(['admin', 'editor'])` for write operations
- Observers get read-only access

**Portal Roles:**
- **Admin**: Full access (users, settings, all CRUD operations)
- **Editor**: Can create/edit/delete entities, OUs, dependencies, issues
- **Observer**: Read-only access to all data

### Files to Create:
- `apps/api/api/v1/profile.py`
- `apps/api/api/v1/api_keys.py`
- `apps/api/api/v1/users.py`
- `web/src/pages/Profile.tsx`
- `web/src/pages/Users.tsx`

### Files to Modify:
- `apps/api/models/pydal_models.py` - Add api_keys table, portal_role field
- `apps/api/auth/decorators.py` - Add role_required decorator
- `web/src/App.tsx` - Add routes
- `web/src/components/Layout.tsx` - Add nav links
- All endpoint files - Add @login_required decorators

### Implementation Order:
1. Add @login_required to all endpoints (fix immediate issue)
2. Add portal_role field and role decorators
3. Create Profile page with basic info
4. Add API Keys management
5. Create Users management page
6. Test complete authentication flow

This creates a complete, production-ready authentication and user management system.
