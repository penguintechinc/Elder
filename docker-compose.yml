version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: elder-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-elder}
      POSTGRES_USER: ${POSTGRES_USER:-elder}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-elder_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-elder} -d ${POSTGRES_DB:-elder}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - elder-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: elder-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-elder_redis_password} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - elder-network

  # Elder Web UI
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: elder-web
    ports:
      - "${WEB_PORT:-3000}:80"
    depends_on:
      - api
    networks:
      - elder-network
    restart: unless-stopped

  # Elder Flask API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: elder-api
    environment:
      # Flask
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_APP=apps.api.main:create_app
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}

      # Database - Use individual components for flexibility
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-elder}
      - DB_USER=${POSTGRES_USER:-elder}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-elder_dev_password}
      - DB_POOL_SIZE=20

      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD:-elder_redis_password}@redis:6379/0

      # gRPC
      - GRPC_ENABLED=true
      - GRPC_PORT=50051

      # License Server
      - LICENSE_KEY=${LICENSE_KEY}
      - PRODUCT_NAME=elder
      - LICENSE_SERVER_URL=${LICENSE_SERVER_URL:-https://license.penguintech.io}

      # Auth
      - SAML_ENABLED=${SAML_ENABLED:-false}
      - OAUTH2_ENABLED=${OAUTH2_ENABLED:-false}
      - LDAP_ENABLED=${LDAP_ENABLED:-false}

      # Admin user (optional, created on first run)
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@localhost}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SYSLOG_ENABLED=${SYSLOG_ENABLED:-false}

      # Metrics
      - METRICS_ENABLED=true

    ports:
      - "${API_PORT:-5000}:5000"
      - "${GRPC_PORT:-50051}:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - elder-network
    volumes:
      - ./apps:/app/apps
      - ./shared:/app/shared

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: elder-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - elder-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: elder-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./infrastructure/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    depends_on:
      - prometheus
    networks:
      - elder-network
    restart: unless-stopped

  # Elder gRPC Server (Enterprise Only)
  grpc-server:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: elder-grpc-server
    command: python3 -m apps.api.grpc.server
    environment:
      # Database - Use individual components for flexibility
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-elder}
      - DB_USER=${POSTGRES_USER:-elder}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-elder_dev_password}
      - DB_POOL_SIZE=20

      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD:-elder_redis_password}@redis:6379/0

      # gRPC Configuration
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
      - GRPC_MAX_WORKERS=10
      - GRPC_REQUIRE_LICENSE=${GRPC_REQUIRE_LICENSE:-true}

      # License Server (Enterprise Required)
      - LICENSE_KEY=${LICENSE_KEY}
      - PRODUCT_NAME=elder
      - LICENSE_SERVER_URL=${LICENSE_SERVER_URL:-https://license.penguintech.io}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    ports:
      - "${GRPC_PORT:-50051}:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - elder-network
    volumes:
      - ./apps:/app/apps
      - ./shared:/app/shared
    restart: unless-stopped

  # Envoy Proxy for gRPC-Web
  grpc-web-proxy:
    build:
      context: ./infrastructure/envoy
      dockerfile: Dockerfile
    container_name: elder-grpc-web-proxy
    ports:
      - "${GRPC_WEB_PORT:-8080}:8080"
      - "${ENVOY_ADMIN_PORT:-9901}:9901"
    depends_on:
      - grpc-server
    networks:
      - elder-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  elder-network:
    driver: bridge
