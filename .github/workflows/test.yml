name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run flake8
        run: flake8 apps/ shared/ --max-line-length=120 --exclude=apps/api/grpc/generated

      - name: Run black
        run: black --check apps/ shared/ --exclude=apps/api/grpc/generated

      - name: Run isort
        run: isort --check-only apps/ shared/ --skip apps/api/grpc/generated

      - name: Run mypy
        run: mypy apps/ shared/ --ignore-missing-imports --exclude apps/api/grpc/generated
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Safety check for Python dependencies
        uses: pyupio/safety@2.3.5
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Generate gRPC code
        run: |
          pip install grpcio-tools
          make generate-grpc

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=apps --cov=shared --cov-report=xml --cov-report=term-missing
        env:
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: elder_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: elder_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Generate gRPC code
        run: |
          pip install grpcio-tools
          make generate-grpc

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://elder_test:test_password@localhost:5432/elder_test

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --cov=apps --cov-report=xml
        env:
          DATABASE_URL: postgresql://elder_test:test_password@localhost:5432/elder_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          FLASK_ENV: testing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integration
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: false
          tags: elder-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm elder-api:test python -c "import apps.api.main; print('Import successful')"
