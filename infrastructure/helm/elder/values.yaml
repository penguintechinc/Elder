# Default values for Elder
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ghcr.io
  imagePullSecrets: []

# Elder API configuration
api:
  enabled: true
  replicaCount: 3
  image:
    repository: penguintechinc/elder-api
    pullPolicy: IfNotPresent
    tag: "latest"

  service:
    type: ClusterIP
    port: 80
    targetPort: 5000
    annotations: {}

  ingress:
    enabled: false
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: elder.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: elder-tls
        hosts:
          - elder.example.com

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Elder gRPC server configuration
grpc:
  enabled: true
  replicaCount: 2
  image:
    repository: penguintechinc/elder-grpc
    pullPolicy: IfNotPresent
    tag: "latest"

  service:
    type: ClusterIP
    port: 50051
    annotations: {}

  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  config:
    maxWorkers: 10
    requireLicense: true

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Envoy proxy for gRPC-Web
envoy:
  enabled: true
  replicaCount: 2
  image:
    repository: penguintechinc/elder-envoy
    pullPolicy: IfNotPresent
    tag: "latest"

  service:
    type: ClusterIP
    port: 8080
    adminPort: 9901
    annotations: {}

  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

  nodeSelector: {}
  tolerations: []
  affinity: {}

# PostgreSQL configuration (Bitnami chart)
postgresql:
  enabled: true
  auth:
    username: elder
    password: ""  # Set via --set or secrets
    database: elder
  primary:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"

# Redis configuration (Bitnami chart)
redis:
  enabled: true
  auth:
    enabled: true
    password: ""  # Set via --set or secrets
  master:
    persistence:
      enabled: true
      size: 1Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"

# Elder configuration
config:
  # Flask configuration
  flaskEnv: production
  secretKey: ""  # Required: Set via --set or external secret

  # License configuration (Enterprise)
  license:
    key: ""  # Required for enterprise features
    serverUrl: "https://license.penguintech.io"
    productName: "elder"

  # Database URL (if not using bundled PostgreSQL)
  databaseUrl: ""

  # Redis URL (if not using bundled Redis)
  redisUrl: ""

  # Authentication providers
  auth:
    samlEnabled: false
    oauth2Enabled: false
    ldapEnabled: false

  # Logging
  logging:
    level: INFO
    syslogEnabled: false

  # Metrics
  metricsEnabled: true

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s

  prometheusRule:
    enabled: false
    rules: []

# Network policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
